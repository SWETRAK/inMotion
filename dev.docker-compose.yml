version: '3.9'

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge

services:

  postgres:
    image: postgres:14-alpine
    container_name: inMotion_postgresql
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ims
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", ""]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./database.sql:/docker-entrypoint-initdb.d/init.sql

  minio:
    image: bitnami/minio:latest
    container_name: inMotion_minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=inMotionMinioUser
      - MINIO_ROOT_PASSWORD=inMotionSecretPassword
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3.11-management-alpine
    container_name: inMotion_rabbitmq
    ports:    
      - "15672:15672"
      - "5672:5672"
    networks:
      - backend
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  # BACKEND gateway        
  imsgateway:
    build:
      context: ./in-motion-server/
      dockerfile: ./ImsGateway/development.Dockerfile
    container_name: inMotion_imsGateway
    ports:
      - "80:80"
      - "443:443"
    environment:
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - ASPNETCORE_Kestrel__Certificates__Default__Password=password
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
    volumes:
      - ~/.aspnet/https:/https:ro
    networks:
      - backend
    links:
      - imsauth
      - imsuser
      - imsfriends
      - imspost
      - imsmedia

  # DOTNET packages
  imsauth:
    build:
      context: ./in-motion-server/
      dockerfile: ./Auth/development.Dockerfile
    container_name: inMotion_imsAuth
    ports:
      - "8001:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=DockerDevelopment
    networks:
      - backend
    links:
      - postgres
      - rabbitmq
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
  
  imsemail:
    build:
      context: ./in-motion-server/
      dockerfile: ./Email/development.Dockerfile
    container_name: inMotion_imsEmail
    ports:
      - "8002:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=DockerDevelopment
    networks:
      - backend
    links:
      - rabbitmq
    depends_on:
      - rabbitmq
      
  imsfriends:
    build:
      context: ./in-motion-server/
      dockerfile: ./Friends/development.Dockerfile
    container_name: inMotion_imsFriends
    ports:
      - "8003:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=DockerDevelopment
    networks:
      - backend
    links:
      - rabbitmq
      - postgres
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
        
  imsuser:
    build:
      context: ./in-motion-server/
      dockerfile: ./User/development.Dockerfile
    container_name: inMotion_imsUser
    ports:
      - "8004:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=DockerDevelopment
    networks:
      - backend
    links:
      - rabbitmq
      - postgres
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
  
  imspost:
    build: 
      context: ./in-motion-server/
      dockerfile: ./Post/development.Dockerfile
    container_name: inMotion_imsPost
    ports:
      - "8005:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=DockerDevelopment
    networks:
      - backend
    links:
      - rabbitmq
      - postgres
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  imsmedia:
    build: 
      context: in-motion-server-java
      dockerfile: development.Dockerfile
    container_name: inMotion_imsMedia
    ports:
      - "8006:8080"
    networks:
      - backend
    links:
      - rabbitmq
      - minio
    depends_on:
      - rabbitmq
      - minio
